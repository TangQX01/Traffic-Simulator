// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;
using SIP.FastVRTools.MultiTouch.TUIO;

namespace SIP.FastVRTools.MultiTouch
{
	public class TuioInputManager : TuioInputDelegate
	{
		/// <summary>
		/// Bool switch to enable mouse touch simulate or not.
		/// </summary>
		public bool convertMouseToTouch = true;

		public static TuioInputManager m_tuioManager = null;

		private int fakeEventID = 1000;

		public ArrayList activeIphoneTouches = new ArrayList();

		/// <summary>
		/// This defines a static instance property that attempts to find the manager object in the scene and
		// 	returns it to the caller.
		/// </summary>
		public static TuioInputManager instance {
			get {
				if (m_tuioManager == null) {
					// This is where the magic happens.
					//  FindObjectOfType(...) returns the first AManager object in the scene.
					m_tuioManager =  FindObjectOfType(typeof (TuioInputManager)) as TuioInputManager;
					if (m_tuioManager == null)
						Debug.Log ("Could not locate a TouchEventManager object. You have to have exactly one TouchEventManager in the scene.");
				}
				return m_tuioManager;
			}
		}

		public override void FinishFrame() {
			// this is called when the TUIO fseq message comes through, and it is
			// the end of this cycle.
			// we want to convert all the touchEvents into iPhoneTouch Objects
			activeIphoneTouches.Clear();
			
			// any events 
			foreach (TuioTouchEvent anEvent in m_activeEvents.Values) {
				activeIphoneTouches.Add(touchWithEvent(anEvent));
			}
			base.FinishFrame();
		}

		public TuioTouch touchWithEvent(TuioTouchEvent anEvent)
		{
			TuioTouch newTouch = new TuioTouch();
			newTouch.fingerId = (int)anEvent.m_eventID;
			newTouch.position.x = anEvent.m_screenPosition.x;
			newTouch.position.y = anEvent.m_screenPosition.y;
			newTouch.deltaPosition.x = anEvent.m_screenPosition.x - anEvent.m_lastScreenPosition.x;
			newTouch.deltaPosition.y = anEvent.m_screenPosition.y - anEvent.m_lastScreenPosition.y;
			newTouch.deltaTime = anEvent.m_touchTime - anEvent.m_lastTouchTime;
			newTouch.tapCount = 1; // no tap recog yet
			if (anEvent.m_eventState == TouchEventState.Began) newTouch.phase = TuioTouchPhase.Began;
			if (anEvent.m_eventState == TouchEventState.Moved) newTouch.phase = TuioTouchPhase.Moved;
			if (anEvent.m_eventState == TouchEventState.Stationary) newTouch.phase = TuioTouchPhase.Stationary;
			if (anEvent.m_eventState == TouchEventState.Ended) newTouch.phase = TuioTouchPhase.Ended;
			return newTouch;
		}

		public void LateUpdate()
		{
			if (!convertMouseToTouch) return;
			//////////////////////////////////////////////////
			// this is all about making fake events from the mouse for testing
			////////////////////////////////////////////////////
			Camera cam = Camera.main;
			if (cam == null)
			{
				// someone didnt tag their cameras properly!!
				// just grab the first one
				if (Camera.allCameras.Length == 0) return;
				cam = Camera.allCameras[0];
				if (cam == null) return;
			}
		}
	}
}

