// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace SIP.FastVRTools.Cameras
{
	public enum MovementTransferOnJump
	{
		None, // The jump is not affected by velocity of floor at all.
		InitTransfer, // Jump gets its initial velocity from the floor, then gradualy comes to a stop.
		PermaTransfer, // Jump gets its initial velocity from the floor, and keeps that velocity until landing.
		PermaLocked // Jump is relative to the movement of the last touched floor and will move together with that floor.
	}

	[Serializable]
	public class CharacterDriverMove
	{
		/// <summary>
		/// The Max Forward Speed
		/// </summary>
		public float m_maxForwardSpeed = 10.0f;

		/// <summary>
		/// The max sideway speed.
		/// </summary>
		public float m_maxSidewaySpeed = 10.0f;

		/// <summary>
		/// The max backward speed.
		/// </summary>
		public float m_maxBackwardSpeed = 10.0f;

		/// <summary>
		/// Curve for multiply speed base on slop
		/// </summary>
		public AnimationCurve m_slopSpeedMultiplier = new AnimationCurve(new Keyframe(-90, 1), new Keyframe(0, 1), new Keyframe(90, 0));

		/// <summary>
		/// The max acceleration on ground
		/// </summary>
		public float m_maxGroundAcceleration = 30.0f;

		/// <summary>
		/// The max acceleration in air
		/// </summary>
		public float m_maxAirAcceleration = 20.0f;

		/// <summary>
		/// The character gravity
		/// </summary>
		public float m_gravity= 10.0f;

		/// <summary>
		/// The max fall speed
		/// </summary>
		public float m_maxFallSpeed = 20.0f;

		/// <summary>
		/// The last collision flags returned from controller.Move
		/// </summary>
		public CollisionFlags m_collisionFlags;

		/// <summary>
		/// The velocity of the charactor
		/// </summary>
		public Vector3 m_velocity;

		/// <summary>
		/// This keeps track of our current velocity while we're not grounded
		/// </summary>
		public Vector3 m_frameVelocity;

		//[HideInInspector]
		public Vector3 m_hitPoint = Vector3.zero;

		//[HideInInspector]
		public Vector3 m_lastHitPoint = new Vector3(Mathf.Infinity, 0, 0);

		public CharacterDriverMove ()
		{
		}
	}
}

